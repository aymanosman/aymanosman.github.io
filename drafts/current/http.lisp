(defun http-request (method path host port)
  (usocket:with-client-socket (socket stream host port)
    (http-write-request stream method path host)
    (let ((buffer (make-array 1000 :element-type 'character)))
      (read-sequence buffer stream :start 0 :end 200)
      buffer)))

(defun https-request (method path host port)
  (usocket:with-client-socket (socket stream host port)
    (cl+ssl:ensure-initialized)
    (let ((ctx (cl+ssl:make-context)))
      (cl+ssl:with-global-context (ctx :auto-free-p t)
        (let ((stream (cl+ssl:make-ssl-client-stream stream :hostname host)))
          (http-write-request stream method path host)
          (let ((buffer (make-array 1000 :element-type 'character)))
            (read-sequence buffer stream :start 0 :end 200)
            buffer))))))

(defun http-write-request (stream method path host)
  (format stream "~a ~a HTTP/1.1~%" method path)
  (format stream "Accept: */*~%")
  (format stream "Host: ~a~%" host)
                                        ; (format stream "Accept-Encoding: gzip, deflate~%")
                                        ; (format stream "Connection: keep-alive~%")
  (format stream "User-Agent: lisp~%")
  (terpri stream)
  (force-output stream))
